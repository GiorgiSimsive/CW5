name: CI/CD

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write  # пуш образа в GHCR

concurrency:
  group: "deploy-main"
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.12"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/app
  IMAGE_TAG: ${{ github.sha }}

jobs:
  lint_and_test:
    name: Lint & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

      - name: Install deps (with dev)
        run: |
          poetry install --no-interaction --no-ansi --with dev || poetry install --no-interaction --no-ansi
          source .venv/bin/activate
          pip install -q flake8 pytest || true

      - name: Lint (flake8)
        run: |
          source .venv/bin/activate
          flake8 .

      - name: Run tests (pytest)
        env:
          DJANGO_SETTINGS_MODULE: config.settings
          SECRET_KEY: test-secret
        run: |
          source .venv/bin/activate
          pytest -q
          
  docker_build_check:
    name: Docker build (no push)
    runs-on: ubuntu-latest
    needs: [lint_and_test]
    if: github.event_name == 'pull_request'  # только для PR (в том числе в develop)
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
      - name: Try build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false   # только сборка, без публикации


  build_and_push:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    name: Build & Push to GHCR
    runs-on: ubuntu-latest
    needs: [lint_and_test]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

  deploy:
    name: Deploy to server
    runs-on: ubuntu-latest
    needs: [build_and_push]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # убедимся, что папка на сервере существует
      - name: Ensure remote dir exists
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script_stop: true
          script: |
            mkdir -p "${{ secrets.PROD_PATH }}"

      # зальём compose и nginx.conf
      - name: Upload compose & nginx.conf
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          source: "docker-compose.prod.yml,nginx.conf"
          target: "${{ secrets.PROD_PATH }}"
          strip_components: 0
          overwrite: true

      # логин в GHCR и перезапуск docker compose
      - name: SSH deploy
        uses: appleboy/ssh-action@v1.2.0
        env:
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          GITHUB_OWNER: ${{ github.repository_owner }}
          GITHUB_REPO: ${{ github.event.repository.name }}
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          PROD_PATH: ${{ secrets.PROD_PATH }}
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            echo "${GHCR_TOKEN}" | docker login $REGISTRY -u "${GHCR_USERNAME}" --password-stdin

            cd "${PROD_PATH}"

            export GITHUB_OWNER="${GITHUB_OWNER}"
            export GITHUB_REPO="${GITHUB_REPO}"
            export IMAGE_TAG="${IMAGE_TAG}"

            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d --remove-orphans

            docker image prune -f
