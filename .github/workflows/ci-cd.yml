name: CI/CD

on:
  pull_request:
    branches: [ "main", "develop" ]
  push:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write

concurrency:
  group: "deploy-main"
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.12"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository | toLowerCase }}/app
  IMAGE_TAG: ${{ github.sha }}

jobs:
  lint_and_test:
    name: Lint & Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: cw5_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d cw5_test"
          --health-interval=10s --health-timeout=5s --health-retries=5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

      - name: Install deps (dev)
        run: |
          poetry install --no-interaction --no-ansi --with dev || poetry install --no-interaction --no-ansi
          source .venv/bin/activate
          pip install -q flake8 pytest pytest-django || true

      - name: Prepare .env for CI
        run: |
          cat > .env <<'EOF'
          SECRET_KEY=test-secret
          DEBUG=False
          ALLOWED_HOSTS=localhost,127.0.0.1
          NAME=cw5_test
          USER=postgres
          PASSWORD=postgres
          HOST=127.0.0.1
          PORT=5432
          REDIS_HOST=127.0.0.1
          REDIS_PORT=6379
          EOF

      - name: flake8
        run: |
          source .venv/bin/activate
          flake8 .

      - name: Ensure pytest knows Django settings (fallback)
        run: |
          if [ ! -f pytest.ini ]; then
            echo "[pytest]" > pytest.ini
            echo "DJANGO_SETTINGS_MODULE = config.settings" >> pytest.ini
            echo "python_files = tests.py test_*.py *_tests.py" >> pytest.ini
            echo "addopts = -q" >> pytest.ini
          fi

      - name: Run tests
        env:
          SECRET_KEY: test-secret
          USER: postgres
          PASSWORD: postgres
          NAME: cw5_test
          HOST: 127.0.0.1
          PORT: 5432
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
        run: |
          source .venv/bin/activate
          pytest
  

  docker_build_check:
    name: Docker build (no push)
    runs-on: ubuntu-latest
    needs: [lint_and_test]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
      - name: Try build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false

  build_and_push:
    name: Build & Push to GHCR
    runs-on: ubuntu-latest
    needs: [lint_and_test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Normalize image name (lowercase)
        run: echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}/app" >> $GITHUB_ENV

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

  deploy:
    name: Deploy to server
    runs-on: ubuntu-latest
    needs: [ build_and_push ]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Явно проверяем, что все секреты заданы (дадут понятную ошибку)
      - name: Validate deploy secrets
        run: |
          test -n "${{ secrets.PROD_HOST }}" || (echo "Missing secret: PROD_HOST" && exit 1)
          test -n "${{ secrets.PROD_USER }}" || (echo "Missing secret: PROD_USER" && exit 1)
          test -n "${{ secrets.PROD_PATH }}" || (echo "Missing secret: PROD_PATH" && exit 1)
          test -n "${{ secrets.PROD_SSH_KEY }}" || (echo "Missing secret: PROD_SSH_KEY" && exit 1)
          test -n "${{ secrets.GHCR_USERNAME }}" || (echo "Missing secret: GHCR_USERNAME" && exit 1)
          test -n "${{ secrets.GHCR_TOKEN }}" || (echo "Missing secret: GHCR_TOKEN" && exit 1)

      - name: Ensure remote dir exists
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}   # при желании можешь временно поставить: ubuntu
          key: ${{ secrets.PROD_SSH_KEY }}
          script_stop: true
          script: |
            mkdir -p "${{ secrets.PROD_PATH }}"

      - name: Upload compose & nginx.conf
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          source: "docker-compose.prod.yml,nginx.conf"
          target: "${{ secrets.PROD_PATH }}"
          strip_components: 0
          overwrite: true

      - name: SSH deploy
        uses: appleboy/ssh-action@v1.2.0
        env:
          REGISTRY: ghcr.io
          IMAGE_TAG: ${{ env.IMAGE_TAG }}                  # тег из job Build&Push
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          PROD_PATH: ${{ secrets.PROD_PATH }}
          # эти два возьмём из контекста и на сервере понизим регистр
          GITHUB_OWNER: ${{ github.repository_owner }}
          GITHUB_REPO: ${{ github.event.repository.name }}
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script_stop: true
          # важно: передаём env-переменные на удалённый хост
          envs: REGISTRY,GHCR_USERNAME,GHCR_TOKEN,PROD_PATH,IMAGE_TAG,GITHUB_OWNER,GITHUB_REPO
          script: |
            set -e
            echo "${GHCR_TOKEN}" | docker login "$REGISTRY" -u "${GHCR_USERNAME}" --password-stdin
            cd "${PROD_PATH}"
            export GITHUB_OWNER="$(echo "${GITHUB_OWNER}" | tr '[:upper:]' '[:lower:]')"
            export GITHUB_REPO="$(echo "${GITHUB_REPO}" | tr '[:upper:]' '[:lower:]')"
            # если в compose используется :${IMAGE_TAG:-latest} — подставим полученный тег
            export IMAGE_TAG="${IMAGE_TAG}"
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d --remove-orphans
            docker image prune -f
